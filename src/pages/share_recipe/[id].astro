---
import { Image } from "astro:assets";
import Layout from "../../layouts/Layout.astro";
import Main from "../../components/Main.astro";
import { AstroSeo } from '@astrolib/seo';
import { getSharedRecipeById, getRecipeById } from "../../lib/supabase";

// Use server-side rendering instead of static generation
export const prerender = false;

const { id } = Astro.params;

// Helper function to ensure a value is an array
function ensureArray(value: any): any[] {
  if (!value) return [];
  if (Array.isArray(value)) return value;
  if (typeof value === 'string') return [value];
  return [value];
}

// Define types for recipe data
interface RecipeIngredient {
  name?: string;
  text?: string;
  [key: string]: any;
}

interface RecipeStep {
  text?: string;
  [key: string]: any;
}

interface RecipeEquipment {
  name?: string;
  [key: string]: any;
}

interface RecipeData {
  title: string;
  description: string;
  prepTime: string;
  servings: number;
  ingredients: RecipeIngredient[] | Record<string, RecipeIngredient[]>;
  instructions: (string | RecipeStep)[];
  equipment: (string | RecipeEquipment)[] | string;
  category?: string;
  cuisine?: string;
  image_url?: string;
  level?: string;
  nutrition_values?: any;
}

interface SharedRecipe {
  id: number;
  created_at?: string;
  expired_at?: string;
  recipe: RecipeData | string;
}

// Try to fetch the recipe from both possible sources
let sharedRecipe = null;
if (id) {
  // First try the share_recipe table
  sharedRecipe = await getSharedRecipeById(id) as SharedRecipe | null;
  
  // If not found, try the recipes table
  if (!sharedRecipe) {
    sharedRecipe = await getRecipeById(id) as SharedRecipe | null;
  }
}

const hasRecipeData = !!sharedRecipe;

// Process recipe data if we have it
let recipe: RecipeData | null = null;
if (hasRecipeData && sharedRecipe) {
  try {
    // Parse recipe content from the database
    // The recipe data is stored in the 'recipe' field which might be a JSON string or object
    const recipeData = typeof sharedRecipe.recipe === 'string' 
      ? JSON.parse(sharedRecipe.recipe) 
      : sharedRecipe.recipe;
    
    // Ensure equipment is always an array
    let equipmentArray: (string | RecipeEquipment)[] = [];
    if (recipeData.equipment) {
      if (Array.isArray(recipeData.equipment)) {
        equipmentArray = recipeData.equipment;
      } else if (typeof recipeData.equipment === 'string') {
        // Split by comma if it's a string
        equipmentArray = recipeData.equipment.split(',').map((item: string) => item.trim());
      } else {
        // Handle object case or anything else
        equipmentArray = [recipeData.equipment];
      }
    }
    
    recipe = {
      title: recipeData.title || "Untitled Recipe",
      description: recipeData.description || "",
      prepTime: recipeData.prepTime || recipeData.cookTime || "30 Min",
      servings: recipeData.servings || recipeData.yields || 4,
      ingredients: recipeData.ingredients || [],
      instructions: recipeData.instructions || [],
      equipment: equipmentArray,
      category: recipeData.category,
      cuisine: recipeData.cuisine,
      image_url: recipeData.image_url,
      level: recipeData.level,
      nutrition_values: recipeData.nutrition_values
    };
  } catch (err) {
    console.error("Error parsing recipe data:", err);
  }
}

// Only create schema if we have recipe data
let recipeSchema = null;
if (hasRecipeData && recipe) {
  // Create flattened ingredients list for schema
  let allIngredients: string[] = [];
  if (Array.isArray(recipe.ingredients)) {
    // If ingredients is already a flat array
    allIngredients = recipe.ingredients.map(item => 
      typeof item === 'string' ? item : item.name || item.text || JSON.stringify(item)
    );
  } else if (recipe.ingredients && typeof recipe.ingredients === 'object') {
    // If ingredients is an object with categories
    Object.values(recipe.ingredients).forEach(items => {
      if (Array.isArray(items)) {
        items.forEach(item => {
          allIngredients.push(typeof item === 'string' ? item : item.name || item.text || JSON.stringify(item));
        });
      }
    });
  }

  // Create structured recipe steps for schema
  const recipeSteps = Array.isArray(recipe.instructions) 
    ? recipe.instructions.map((step, index: number) => ({
        "@type": "HowToStep",
        "position": index + 1,
        "text": typeof step === 'string' ? step : step.text || ""
      }))
    : [];

  // Schema.org Recipe schema
  recipeSchema = JSON.stringify({
    "@context": "https://schema.org/",
    "@type": "Recipe",
    "name": recipe.title,
    "description": recipe.description,
    "author": {
      "@type": "Organization",
      "name": "TasteBuddy"
    },
    "image": recipe.image_url || "/images/recipe-preview.png",
    "prepTime": `PT${recipe.prepTime.toString().replace(/[^0-9]/g, '')}M`,
    "cookTime": `PT${recipe.prepTime.toString().replace(/[^0-9]/g, '')}M`,
    "totalTime": `PT${recipe.prepTime.toString().replace(/[^0-9]/g, '')}M`,
    "recipeYield": `${recipe.servings} servings`,
    "recipeCategory": recipe.category || "Main Course",
    "recipeCuisine": recipe.cuisine || "",
    "recipeIngredient": allIngredients,
    "recipeInstructions": recipeSteps,
    "tool": recipe.equipment,
    "publisher": {
      "@type": "Organization",
      "name": "TasteBuddy",
      "logo": {
        "@type": "ImageObject",
        "url": "https://taste-buddy.app/images/logo.png"
      }
    },
    "datePublished": sharedRecipe?.created_at || new Date().toISOString().split('T')[0]
  });
}

// Generic page title and description for when we don't have recipe data
const pageTitle = hasRecipeData && recipe ? `${recipe.title} - TasteBuddy Recipe` : "TasteBuddy Recipe";
const pageDescription = hasRecipeData && recipe ? recipe.description : "Entdecke leckere Rezepte mit TasteBuddy - der ultimativen App f√ºr Rezeptorganisation und Kochen.";
---

<AstroSeo
  title={pageTitle}
  description={pageDescription}
  openGraph={{
    title: hasRecipeData && recipe ? `${recipe.title} - Save this recipe to TasteBuddy` : "Discover recipes with TasteBuddy",
    description: pageDescription,
    images: [{ url: recipe?.image_url || '/images/recipe-preview.png' }],
  }}
/>

{recipeSchema && (
  <script type="application/ld+json" set:html={recipeSchema}></script>
)}

<Layout title={pageTitle}>
  <Main>
    <section class="relative overflow-hidden py-8 sm:py-12">
      <div class="max-w-3xl mx-auto px-4 sm:px-6">
        
        {hasRecipeData && recipe ? (
          <>
            <!-- Recipe Header -->
            <div class="text-center mb-8">
              <span class="inline-block text-xl mb-2">üç≥</span>
              <h1 class="text-3xl sm:text-4xl font-bold text-white mb-4">{recipe.title}</h1>
              <p class="text-lg text-gray-300 mb-6">{recipe.description}</p>
              
              <!-- Recipe Meta Info -->
              <div class="flex flex-wrap justify-center gap-6 mb-6">
                {recipe.prepTime && (
                  <div class="bg-gradient-to-br from-[#1C2513]/90 to-[#1C2513]/80 p-3 rounded-lg border border-[#2A2D24]/30 backdrop-blur-sm">
                    <span class="text-sm text-gray-400">‚è±Ô∏è Kochzeit</span>
                    <p class="text-white font-medium">{recipe.prepTime}</p>
                  </div>
                )}
                {recipe.servings && (
                  <div class="bg-gradient-to-br from-[#1C2513]/90 to-[#1C2513]/80 p-3 rounded-lg border border-[#2A2D24]/30 backdrop-blur-sm">
                    <span class="text-sm text-gray-400">üë• Portionen</span>
                    <p class="text-white font-medium">{recipe.servings}</p>
                  </div>
                )}
                {recipe.level && (
                  <div class="bg-gradient-to-br from-[#1C2513]/90 to-[#1C2513]/80 p-3 rounded-lg border border-[#2A2D24]/30 backdrop-blur-sm">
                    <span class="text-sm text-gray-400">üî• Schwierigkeit</span>
                    <p class="text-white font-medium capitalize">{recipe.level}</p>
                  </div>
                )}
              </div>
            </div>
            
            <!-- Recipe Image (if available) -->
            {recipe.image_url && (
              <div class="mb-8 rounded-xl overflow-hidden">
                <img 
                  src={recipe.image_url} 
                  alt={`Photo of ${recipe.title}`} 
                  class="w-full h-auto"
                />
              </div>
            )}
            
            <!-- Recipe Content -->
            <div class="bg-gradient-to-br from-[#1C2513]/90 to-[#1C2513]/80 p-6 sm:p-8 rounded-2xl border border-[#2A2D24]/30 backdrop-blur-sm mb-8">
              
              <!-- Ingredients -->
              {recipe.ingredients && (Array.isArray(recipe.ingredients) ? recipe.ingredients.length > 0 : Object.keys(recipe.ingredients).length > 0) && (
                <div class="mb-8">
                  <h2 class="text-2xl font-bold text-white mb-4">üìù Zutaten</h2>
                  
                  {/* Handle different ingredient structures */}
                  {Array.isArray(recipe.ingredients) ? (
                    <ul class="space-y-1">
                      {recipe.ingredients.map((item: string | RecipeIngredient) => (
                        <li class="text-gray-300">‚Ä¢ {typeof item === 'string' ? item : item.name || item.text || JSON.stringify(item)}</li>
                      ))}
                    </ul>
                  ) : recipe.ingredients && typeof recipe.ingredients === 'object' ? (
                    Object.entries(recipe.ingredients).map(([category, items]) => (
                      <div class="mb-4">
                        <h3 class="text-xl font-semibold text-white mb-2">üìù {category}</h3>
                        <ul class="space-y-1">
                          {Array.isArray(items) && items.map((item: string | RecipeIngredient) => (
                            <li class="text-gray-300">‚Ä¢ {typeof item === 'string' ? item : item.name || item.text || JSON.stringify(item)}</li>
                          ))}
                        </ul>
                      </div>
                    ))
                  ) : null}
                </div>
              )}
              
              <!-- Instructions -->
              {recipe.instructions && recipe.instructions.length > 0 && (
                <div class="mb-8">
                  <h2 class="text-2xl font-bold text-white mb-4">üë©‚Äçüç≥ Zubereitung</h2>
                  <ol class="space-y-3">
                    {recipe.instructions.map((step: string | RecipeStep, index: number) => (
                      <li class="text-gray-300">
                        <span class="font-bold text-white">{index + 1}.</span> {typeof step === 'string' ? step : step.text || JSON.stringify(step)}
                      </li>
                    ))}
                  </ol>
                </div>
              )}
              
              <!-- Equipment -->
              {recipe?.equipment && (
                <div class="mb-8">
                  <h2 class="text-2xl font-bold text-white mb-4">üîß K√ºchenger√§te</h2>
                  <ul class="space-y-1">
                    {ensureArray(recipe.equipment).map((item: string | RecipeEquipment) => (
                      <li class="text-gray-300">‚Ä¢ {typeof item === 'string' ? item : item.name || JSON.stringify(item)}</li>
                    ))}
                  </ul>
                </div>
              )}
              
              <!-- Nutrition Information (if available) -->
              {recipe.nutrition_values && Object.keys(recipe.nutrition_values).length > 0 && (
                <div>
                  <h2 class="text-2xl font-bold text-white mb-4">ü•ó N√§hrwerte</h2>
                  <div class="grid grid-cols-2 sm:grid-cols-3 gap-3">
                    {Object.entries(recipe.nutrition_values).map(([key, value]) => (
                      <div class="bg-[#1C2513]/50 p-2 rounded">
                        <p class="text-sm text-gray-400 capitalize">{key}</p>
                        <p class="text-white font-medium">{value}</p>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </>
        ) : (
          <!-- Generic Recipe Info when no specific data -->
          <div class="text-center mb-8">
            <span class="inline-block text-4xl mb-4">üç≥</span>
            <h1 class="text-3xl sm:text-4xl font-bold text-white mb-4">Entdecke dieses Rezept</h1>
            <p class="text-lg text-gray-300 mb-6">Lade TasteBuddy herunter, um dieses und tausende andere Rezepte zu entdecken, zu speichern und mit Freunden zu teilen.</p>
          </div>
        )}
        
        <!-- CTA Banner (always shown) -->
        <div class="bg-gradient-to-r from-[#00CE31]/40 to-[#00CE31]/30 rounded-xl p-6 sm:p-8 text-center backdrop-blur-sm border border-[#00CE31]/30">
          <h2 class="text-xl sm:text-2xl font-bold text-white mb-3">
            {hasRecipeData && recipe ? "Dieses Rezept speichern" : "Rezepte entdecken und speichern"}
          </h2>
          <p class="text-gray-200 mb-6">
            {hasRecipeData && recipe 
              ? "Speichern Sie dieses Rezept in TasteBuddy, um es jederzeit offline zu finden, m√ºhelos einzukaufen und mit Freunden zu teilen."
              : "Mit TasteBuddy k√∂nnen Sie Rezepte importieren, organisieren und teilen. Nie wieder verlorene Rezepte!"
            }
          </p>
          
          <div class="flex flex-wrap justify-center gap-4">
            <a 
              href="https://apps.apple.com/app/id6554007741"
              aria-label="Download TasteBuddy on the App Store"
              class="transform transition-transform duration-300 hover:scale-105"
              target="_blank" 
              rel="noopener noreferrer"
            >
              <img
                src="/images/Download_on_the_App_Store_Badge_US-UK_RGB_blk_092917.svg"
                alt="Download TasteBuddy on the App Store"
                class="h-12"
              />
            </a>
            <a 
              href="https://play.google.com/store/apps/details?id=app.tastebuddy"
              aria-label="Download TasteBuddy on Google Play"
              class="transform transition-transform duration-300 hover:scale-105"
              target="_blank" 
              rel="noopener noreferrer"
            >
              <img
                src="/images/Google_Play_Badge.png"
                alt="Download TasteBuddy on Google Play"
                class="h-12"
              />
            </a>
          </div>
          
          <div class="mt-6 text-sm text-gray-300">
            <p>Oder √∂ffnen Sie diesen Link in der App:</p>
            <a href={`https://taste-buddy.app/share_recipe/${id}`} class="text-[#00CE31] underline mt-1 inline-block">
              taste-buddy.app/share_recipe/{id}
            </a>
          </div>
        </div>
      </div>
    </section>
  </Main>
</Layout> 